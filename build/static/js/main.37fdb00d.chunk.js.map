{"version":3,"sources":["selectors/selectFields.js","services/hnApi.js","styles/StoryStyles.js","components/Story.js","mappers/mapTime.js","styles/StoriesStyles.js","hooks/useInfiniteScroll.js","constants/index.js","utils/debounce.js","containers/Stories.js","serviceWorker.js","index.js","App.js"],"names":["selectFields","id","by","url","title","time","BASE_URL","NEW_STORIES_URL","STORY_URL","getStory","a","axios","get","then","data","result","getStoryIds","StoryWrapper","styled","section","StoryTitle","h1","StoryMeta","div","StoryMetaElement","span","props","color","Story","memo","sid","useState","story","setStory","useEffect","data-testid","href","rel","target","className","ts","seconds","Math","floor","Date","interval","mapTime","GlobalStyle","createGlobalStyle","StoriesWrapper","main","useInfiniteScroll","isLoading","setIsLoading","count","setCount","handleScroll","func","wait","immediate","args","timeout","callNow","clearTimeout","setTimeout","apply","debounce","window","innerHeight","document","documentElement","scrollTop","offsetHeight","addEventListener","removeEventListener","Stories","storyIds","setStoryIds","res","length","slice","map","storyId","key","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","render","getElementById","URL","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4OAAaA,EAAe,wEAA+B,GAA5BC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,GAAIC,EAAX,EAAWA,IAAKC,EAAhB,EAAgBA,MAAMC,EAAtB,EAAsBA,KAAtB,MAAuC,CAC/DH,KACAD,KACAI,OACAD,QACAD,QCFSG,EAAW,wCACXC,EAAe,UAAMD,EAAN,oBACfE,EAAS,UAAMF,EAAN,UAETG,EAAQ,uCAAG,WAAMR,GAAN,eAAAS,EAAA,sEACCC,IAAMC,IAAN,UAAaJ,EAAb,YAA0BP,EAA1B,UAChBY,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcd,EAAac,MAFjB,cACdC,EADc,yBAIbA,GAJa,2CAAH,sDAORC,EAAW,uCAAG,4BAAAN,EAAA,sEACFC,IAAMC,IAAIL,GAC1BM,MAAK,qBAAGC,QAFU,cACjBC,EADiB,yBAIhBA,GAJgB,2CAAH,qD,2wCCZjB,IAAME,EAAeC,IAAOC,QAAV,KAeZC,EAAaF,IAAOG,GAAV,KAuBVC,EAAYJ,IAAOK,IAAV,KAaTC,EAAmBN,IAAOO,KAAV,KAEhB,SAAAC,GAAK,OAAIA,EAAMC,OAAS,SCjDxBC,EAAQC,gBAAK,YAAY,IAAVC,EAAS,EAATA,IAAS,EACPC,mBAAS,IADF,mBAC1BC,EAD0B,KACnBC,EADmB,KAQjC,OANAC,qBAAU,WACNzB,EAASqB,GAAKjB,MAAK,SAAAC,GACfA,GAAQA,EAAKX,KAAO8B,EAASnB,QAElC,MAEMkB,EAAM7B,KACX,kBAACc,EAAD,CAAckB,cAAY,SACtB,kBAACf,EAAD,KACA,uBAAGgB,KAAMJ,EAAM7B,IAAKkC,IAAI,sBAAsBC,OAAO,UAChDN,EAAM5B,QAGX,kBAACkB,EAAD,KACI,0BAAMiB,UAAU,YAAYJ,cAAY,YACpC,kBAACX,EAAD,CAAkBG,MAAM,QAAxB,OADJ,IAG0BK,EAAM9B,IAEhC,0BAAMqC,UAAU,cAAcJ,cAAY,cACtC,kBAACX,EAAD,CAAkBG,MAAM,QAAxB,WADJ,cC3BO,SAAAa,GACnB,IAAMC,EAAUC,KAAKC,OAAO,IAAIC,KAAc,IAALJ,GAAa,KAElDK,EAAWH,KAAKC,MAAMF,EAAU,SAEpC,OAAII,EAAW,EACL,GAAN,OAAUA,EAAV,WAGJA,EAAWH,KAAKC,MAAMF,EAAU,SAEjB,EACL,GAAN,OAAUI,EAAV,YAGJA,EAAWH,KAAKC,MAAMF,EAAU,QAEtB,GAAN,OAAUI,EAAV,UAGJA,EAAWH,KAAKC,MAAMF,EAAU,OACjB,EACL,GAAN,OAAUI,EAAV,WAGJA,EAAWH,KAAKC,MAAMF,EAAU,KACjB,EACL,GAAN,OAAUI,EAAV,YAIY,GAAZA,EACM,GAAN,OAAUA,EAAV,WAGE,GAAN,OAAUH,KAAKC,MAAMF,GAArB,YDLwCK,CAAQd,EAAM3B,MAH1C,c,qrBEzBT,IAAM0C,EAAcC,YAAH,KA2BXC,EAAiB/B,IAAOgC,KAAV,KCxBdC,EAAoB,WAAO,IAAD,EACDpB,oBAAS,GADR,mBAC5BqB,EAD4B,KACjBC,EADiB,OAETtB,mBCPC,GDKQ,mBAE5BuB,EAF4B,KAErBC,EAFqB,KAI7BC,EETc,SAACC,EAAMC,EAAMC,EAAWC,GAC5C,IAAIC,EAEJ,OAAO,WACH,IACMC,EAAUH,IAAcE,EAQ9BE,aAAaF,GACbA,EAAUG,YARI,WACVH,EAAU,KACLF,GACDF,EAAKQ,W,EAAeL,KAKAF,GAExBI,GACAL,EAAKQ,W,EAAeL,IFRPM,EAAS,WAAO,IAAD,EAS5BC,OAPAC,EAF4B,EAE5BA,YAF4B,IAG5BC,SACIC,gBACIC,EALoB,EAKpBA,UACAC,EANoB,EAMpBA,aAKZ,GAAIpB,GACCgB,EAAcG,EAAYC,EAE3B,OAAO,EAGXnB,GAAa,KACd,KAyBH,OAvBAnB,qBAAU,WACDkB,IAKDG,EADAD,EClCmB,GACJ,QDqCNA,ECtCU,GDyCvBD,GAAa,MACd,CAACD,IAEJlB,qBAAU,WAGN,OAFAiC,OAAOM,iBAAiB,SAAUjB,GAE3B,WACHW,OAAOO,oBAAoB,SAAUlB,MAE1C,IAEI,CAAEF,UG3CAqB,EAAU,WAAO,IAAD,EACO5C,mBAAS,IADhB,mBAClB6C,EADkB,KACRC,EADQ,KAEjBvB,EAAUH,IAAVG,MAMR,OAJApB,qBAAU,WACNlB,IAAcH,MAAK,SAAAiE,GAAG,OAAID,EAAYC,QACvC,IAGC,oCACI,kBAAC/B,EAAD,MACA,kBAACE,EAAD,CAAgBd,cAAY,qBAC5B,+CACIyC,KAAcA,EAASG,QAAUH,EAASI,MAAM,EAAG1B,GAAO2B,KAAI,SAAAC,GAAO,OAAI,kBAACtD,EAAD,CAAOuD,IAAKD,EAASpD,IAAKoD,UCV7GE,EAAcC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT7E,MAAK,SAAAkF,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,iBAAO,mBCFY,kBAAM,kBAAC,EAAD,QDElB,MAASvC,SAASwC,eAAe,SDiBjC,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,kBAAwB5C,OAAOmB,SAASlD,MACpD4E,SAAW7C,OAAOmB,SAAS0B,OAIvC,OAGF7C,OAAOM,iBAAiB,QAAQ,WAC9B,IAAMiB,EAAK,UAAMqB,kBAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCsB,MAAMvB,GACH7E,MAAK,SAAAqG,GAEJ,IAAMC,EAAcD,EAASE,QAAQxG,IAAI,gBAEnB,MAApBsG,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAM1G,MAAK,SAAAkF,GACjCA,EAAayB,aAAa3G,MAAK,WAC7BsD,OAAOmB,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAmB,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAM1G,MAAK,WACjCyF,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCxC/BE,K","file":"static/js/main.37fdb00d.chunk.js","sourcesContent":["export const selectFields = ({ id, by, url, title,time } = {}) => ({\n    by,\n    id,\n    time,\n    title,\n    url\n});","import axios from \"axios\";\nimport { selectFields } from \"../selectors/selectFields\";\n\nexport const BASE_URL = 'https://hacker-news.firebaseio.com/v0';\nexport const NEW_STORIES_URL = `${BASE_URL}/newstories.json`;\nexport const STORY_URL = `${BASE_URL}/item/`;\n\nexport const getStory = async id => {\n    const result = await axios.get(`${STORY_URL}/${id}.json`)\n        .then(({ data }) => selectFields(data));\n\n    return result;\n}\n\nexport const getStoryIds = async () => {\n    const result = await axios.get(NEW_STORIES_URL)\n        .then(({ data }) => data);\n\n    return result;\n};","import styled from 'styled-components';\n\nexport const StoryWrapper = styled.section`\n    padding-top: 10px;\n    margin-bottom: 20px;\n    border-top: 1px solid #cccccc;\n\n    &:first-of-type {\n        border-top: 0;\n    }\n\n    &:last-of-type {\n        margin-bottom: 0;\n        padding-bottom: 0;\n    }\n`;\n\nexport const StoryTitle = styled.h1`\n    margin-bottom: 5px;\n    font-size: 16px;\n    line-height: 1.4;\n    margin: 0;\n    text-decoration: none;\n\n    a {\n        font-size: 24px;\n        background-image: linear-gradient(60deg, #f0f0f0 0%, #0fff77 100%);\n        background-repeat: no-repeat;\n        background-size: 96% 0.2em;\n        background-position: 0 88%;\n        transition: background-size 0.25s ease-in;\n        text-decoration: none;\n    }\n\n    a:hover {\n        background-size: 112% 88%;\n        color: blue;\n    }\n`;\n\nexport const StoryMeta = styled.div`\n    margin: 0.5rem 0;\n    font-style: italic;\n    > span:not(:first-child):before {\n        content: 'â€¢';\n        margin: 0 7px;\n    }\n\n    .story__meta-bold {\n        font-weight: normal;\n    }\n`;\n\nexport const StoryMetaElement = styled.span`\n    font-weight: bold;\n    color: ${props => props.color || 'red'};\n`;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { memo, useEffect, useState } from 'react';\nimport { getStory } from \"../services/hnApi\";\nimport { StoryWrapper, StoryTitle, StoryMeta, StoryMetaElement } from \"../styles/StoryStyles\";\nimport { mapTime } from \"../mappers/mapTime\";\n\nexport const Story = memo(({sid}) => {\n    const [story, setStory] = useState({});\n    useEffect(() => {\n        getStory(sid).then(data => {\n            data && data.url && setStory(data);\n        })\n    }, [])\n\n    return !!story.url && (\n        <StoryWrapper data-testid=\"story\">\n            <StoryTitle>\n            <a href={story.url} rel=\"noopener noreferrer\" target=\"_blank\">\n                {story.title}\n            </a>\n            </StoryTitle>\n            <StoryMeta>\n                <span className=\"story__by\" data-testid=\"story-by\">\n                    <StoryMetaElement color=\"#000\">\n                        By:\n                    </StoryMetaElement> { story.by }\n                </span>\n                <span className=\"story__time\" data-testid=\"story-time\">\n                    <StoryMetaElement color=\"#000\">\n                        Posted:\n                    </StoryMetaElement> {`${mapTime(story.time)} ago` }\n                </span>\n            </StoryMeta>\n        </StoryWrapper>\n        );\n});\n","export const mapTime = ts => {\n    const seconds = Math.floor((new Date() - ts * 1000) / 1000);\n\n    let interval = Math.floor(seconds / 31536000);\n\n    if (interval > 1) {\n        return `${interval} years`;\n    }\n\n    interval = Math.floor(seconds / 2592000);\n\n    if (interval > 1) {\n        return `${interval} months`;\n    }\n\n    interval = Math.floor(seconds / 86400);\n    if (interval) {\n        return `${interval} days`;\n    }\n\n    interval = Math.floor(seconds / 3600);\n    if (interval > 1) {\n        return `${interval} hours`;\n    }\n\n    interval = Math.floor(seconds / 60);\n    if (interval > 1) {\n        return `${interval} minutes`;\n    }\n\n    // eslint-disable-next-line\n    if (interval == 1) {\n        return `${interval} minute`;\n    }\n\n    return `${Math.floor(seconds)} seconds`;\n}","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        -webkit-box-sizing: border-box;\n        box-sizing: border-box;\n    }\n\n    *, *:before, *:after {\n        -webkit-box-sizing: inherit;\n        box-sizing: inherit;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n        line-height: 1;\n        color: #202020;\n        background-color: #fafafe;\n        font-family: Arial, Helvetica, sans-serif;\n        font-size: 16px;\n    }\n\n    ul {\n        margin: 0;\n        padding: 0;\n    }\n`;\n\nexport const StoriesWrapper = styled.main`\n    max-width: 640px;\n    padding: 20px 15px;\n    margin: auto;\n`;","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useEffect, useState } from \"react\";\nimport { MAX_STORIES, STORY_INCREMENT } from \"../constants\";\nimport { debounce } from \"../utils/debounce\";\n\nexport const useInfiniteScroll = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [count, setCount] = useState(STORY_INCREMENT);\n\n    const handleScroll = debounce(() => {\n        const {\n            innerHeight,\n            document: {\n                documentElement: {\n                    scrollTop,\n                    offsetHeight\n                }\n            }\n        } = window;\n        \n        if (isLoading || (\n            (innerHeight + scrollTop < offsetHeight)\n        )) {\n            return false;\n        }\n\n        setIsLoading(true);\n    }, 500);\n\n    useEffect(() => {\n        if (!isLoading) {\n            return;\n        }\n\n        if (count + STORY_INCREMENT >= MAX_STORIES) {\n            setCount(MAX_STORIES);\n        }\n        else {\n            setCount(count + STORY_INCREMENT);\n        }\n\n        setIsLoading(false);\n    }, [isLoading]);\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll)\n        \n        return () => {\n            window.removeEventListener('scroll', handleScroll);\n        }\n    }, [])\n\n    return { count };\n}","export const STORY_INCREMENT = 9;\nexport const MAX_STORIES = 500;","export const debounce = (func, wait, immediate, args) => {\n    let timeout;\n\n    return () => {\n        const context = this;\n        const callNow = immediate && !timeout;\n        const later = () => {\n            timeout = null;\n            if (!immediate) {\n                func.apply(context, args);\n            }\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n\n        if (callNow) {\n            func.apply(context, args);\n        }\n    }\n};","import React, { useEffect, useState } from 'react';\nimport { getStoryIds } from \"../services/hnApi\";\nimport { Story } from '../components/Story';\nimport {\n    GlobalStyle,\n    StoriesWrapper,\n} from \"../styles/StoriesStyles\";\nimport { useInfiniteScroll } from \"../hooks/useInfiniteScroll\";\n\nexport const Stories = () => {\n    const [storyIds, setStoryIds] = useState([]);\n    const { count } = useInfiniteScroll();\n\n    useEffect(() => {\n        getStoryIds().then(res => setStoryIds(res));\n    }, []);\n\n    return (\n        <>\n            <GlobalStyle />\n            <StoriesWrapper data-testid=\"stories-container\">\n            <h1> Hacker News </h1>      \n             {!!storyIds && !!storyIds.length && storyIds.slice(0, count).map(storyId => <Story key={storyId} sid={storyId} />)}\n            </StoriesWrapper>\n        </>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from 'react';\nimport { Stories } from './containers/Stories';\n\nexport const App = () => <Stories />;\n"],"sourceRoot":""}